//
//  AdminHomeViewController.swift
//  Chortal
//
//  Created by Christopher Erdos on 2/16/16.
//  Copyright Â© 2016 JonerDos. All rights reserved.
//

import UIKit
<<<<<<< HEAD
<<<<<<< HEAD
import CloudKit 

class AdminHomeViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {
    //MARK: Properties

=======
=======
>>>>>>> 8297107fd4b84262dd0ed85d31d1a133bfe6593d
import CloudKit

class AdminHomeViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {
    //MARK: Properties
    var taskArray = [CKRecord]()
<<<<<<< HEAD
    var currentOrganization: CKRecord?
>>>>>>> 6859ddc5554f52b489648bdc37e05cf6cb79f770
=======
>>>>>>> 8297107fd4b84262dd0ed85d31d1a133bfe6593d
    
    //MARK: Outlets
    @IBOutlet weak var tabBar: UITabBar!
    @IBOutlet weak var tableView: UITableView!
<<<<<<< HEAD
    
<<<<<<< HEAD

    
=======
>>>>>>> 6859ddc5554f52b489648bdc37e05cf6cb79f770
=======
    @IBOutlet weak var menuButton: UIBarButtonItem!
    
>>>>>>> 8297107fd4b84262dd0ed85d31d1a133bfe6593d
    //MARK: View Loading
    override func viewDidLoad() {
        super.viewDidLoad()
        title = userDefaults.valueForKey("currentOrgName") as? String
<<<<<<< HEAD

        getOrganization()
    }
    
    override func viewWillAppear(animated: Bool) {
        
=======
        
        getOrganization()
        
        if self.revealViewController() != nil {
            menuButton.target = self.revealViewController()
            menuButton.action = "revealToggle:"
            self.view.addGestureRecognizer(self.revealViewController().panGestureRecognizer())
        }
    }
    
    override func viewWillAppear(animated: Bool) {
<<<<<<< HEAD
        super.viewWillAppear(true)
        
        tableView.reloadData()
=======
>>>>>>> settings
>>>>>>> 8297107fd4b84262dd0ed85d31d1a133bfe6593d
    }
    
    //MARK: Custom Functions
    func getOrganization() {
        let predicate = NSPredicate(format: "uid == %@", orgID!)
        let query = CKQuery(recordType: "Organization", predicate: predicate)
        publicDatabase.performQuery(query, inZoneWithID: nil) { (organizations, error) -> Void in
            if error != nil {
                print(error)
            } else {
<<<<<<< HEAD
            print("performing query, organizations: \(organizations![0]["name"])")
            self.currentOrganization = organizations![0] as CKRecord
            self.getTasks()
=======
<<<<<<< HEAD
                print("performing query, organizations: \(organizations![0]["name"])")
                self.currentOrganization = organizations![0] as CKRecord
                self.getTasks()
=======
            print("performing query, organizations: \(organizations![0]["name"])")
            currentOrg = organizations![0] as CKRecord
            self.getTasks()
>>>>>>> settings
>>>>>>> 8297107fd4b84262dd0ed85d31d1a133bfe6593d
            }
        }
    }
    
    func getTasks() {
<<<<<<< HEAD
        let taskReferenceArray = currentOrganization!.mutableArrayValueForKey("tasks")
=======
        let taskReferenceArray = currentOrg!.mutableArrayValueForKey("tasks")
>>>>>>> 8297107fd4b84262dd0ed85d31d1a133bfe6593d
        for taskRef in taskReferenceArray {
            publicDatabase.fetchRecordWithID(taskRef.recordID, completionHandler: { (task, error) -> Void in
                if error != nil {
                    print(error)
                } else {
                    if task != nil {
<<<<<<< HEAD
                    self.taskArray.append(task!)
                    print("appended task: \(task)")
=======
                        self.taskArray.append(task!)
                        print("appended task: \(task)")
>>>>>>> 8297107fd4b84262dd0ed85d31d1a133bfe6593d
                    }
                }
                dispatch_async(dispatch_get_main_queue(), { () -> Void in
                    self.tableView.reloadData()
                })
            })
        }
    }
    
    //MARK: IBActions
    @IBAction func menuButtonTap(sender: AnyObject) {
    }
    
    @IBAction func createTaskButtonTap(sender: AnyObject) {
    }
    
    //MARK: Delegate Functions
    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCellWithIdentifier("pizza")!
        let task = taskArray[indexPath.row]
        cell.textLabel?.text = task.valueForKey("name") as? String
        cell.detailTextLabel?.text = task.valueForKey("description") as? String
        
        return cell
    }
    
    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return taskArray.count
    }
    
    //MARK: Segues
<<<<<<< HEAD
    

=======
    @IBAction func unwindFromTaskCreate (segue: UIStoryboardSegue) {
        
        
    }
    
>>>>>>> 8297107fd4b84262dd0ed85d31d1a133bfe6593d
}
